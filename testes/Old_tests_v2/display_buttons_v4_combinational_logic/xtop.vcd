$date
	Wed Jan  8 13:15:40 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module xtop_tb $end
$var wire 32 ! r0 [31:0] $end
$var wire 32 " r1 [31:0] $end
$var wire 32 # r10 [31:0] $end
$var wire 32 $ r11 [31:0] $end
$var wire 32 % r12 [31:0] $end
$var wire 32 & r13 [31:0] $end
$var wire 32 ' r14 [31:0] $end
$var wire 32 ( r15 [31:0] $end
$var wire 32 ) r2 [31:0] $end
$var wire 32 * r3 [31:0] $end
$var wire 32 + r4 [31:0] $end
$var wire 32 , r5 [31:0] $end
$var wire 32 - r6 [31:0] $end
$var wire 32 . r7 [31:0] $end
$var wire 32 / r8 [31:0] $end
$var wire 32 0 r9 [31:0] $end
$var wire 1 1 trap $end
$var wire 4 2 Disp_sel [3:0] $end
$var wire 8 3 Disp [7:0] $end
$var reg 1 4 Btn2 $end
$var reg 1 5 Btn3 $end
$var reg 8 6 Sw [7:0] $end
$var reg 1 7 clk $end
$var reg 1 8 rst $end
$var integer 32 9 k [31:0] $end
$var integer 32 : start_time [31:0] $end
$scope module uut $end
$var wire 1 4 Btn2 $end
$var wire 1 5 Btn3 $end
$var wire 8 ; Sw [7:0] $end
$var wire 1 7 clk $end
$var wire 1 8 rst $end
$var wire 1 1 trap $end
$var wire 4 < second_nr [3:0] $end
$var wire 8 = result_uncoded [7:0] $end
$var wire 1 > regf_sel $end
$var wire 32 ? regf_data_to_rd [31:0] $end
$var wire 9 @ pc [8:0] $end
$var wire 4 A operation [3:0] $end
$var wire 1 B mem_sel $end
$var wire 32 C mem_data_to_rd [31:0] $end
$var wire 1 D led0_sel $end
$var wire 32 E instruction [31:0] $end
$var wire 4 F first_nr [3:0] $end
$var wire 1 G display_sel $end
$var wire 1 H data_we $end
$var wire 32 I data_to_wr [31:0] $end
$var wire 32 J data_to_rd [31:0] $end
$var wire 1 K data_sel $end
$var wire 10 L data_addr [9:0] $end
$var wire 1 M cprt_sel $end
$var wire 1 N complement2_sel $end
$var wire 1 O complement2_finish $end
$var wire 1 P alu_sel $end
$var wire 1 Q alu_finish $end
$var wire 4 R Disp_sel [3:0] $end
$var wire 8 S Disp [7:0] $end
$scope module addr_decoder $end
$var wire 1 4 btn2_data_to_read $end
$var wire 1 5 btn3_data_to_read $end
$var wire 8 T sw_data_to_read [7:0] $end
$var wire 1 K sel $end
$var wire 32 U regf_data_to_rd [31:0] $end
$var wire 32 V mem_data_to_rd [31:0] $end
$var wire 1 Q display_data_to_read $end
$var wire 1 O alu_data_to_read $end
$var wire 10 W addr [9:0] $end
$var reg 1 P alu_sel $end
$var reg 1 X azz $end
$var reg 1 Y btn2_sel $end
$var reg 1 Z btn3_sel $end
$var reg 1 N complement2_sel $end
$var reg 1 M cprt_sel $end
$var reg 32 [ data_to_rd [31:0] $end
$var reg 1 G display_sel $end
$var reg 1 D led0_sel $end
$var reg 1 B mem_sel $end
$var reg 1 > regf_sel $end
$var reg 1 \ sw2_sel $end
$var reg 1 ] sw_sel $end
$var reg 1 1 trap_sel $end
$upscope $end
$scope module complement1 $end
$var wire 1 ^ ci $end
$var wire 1 7 clk $end
$var wire 1 N complement1_sel $end
$var wire 1 _ complement1_sel_aux $end
$var wire 4 ` dumb_0 [3:0] $end
$var wire 12 a nr_coded [11:0] $end
$var wire 1 8 rst $end
$var wire 4 b second_nr_aux [3:0] $end
$var wire 4 c first_nr_aux [3:0] $end
$var wire 1 d complement1_finish_nr2 $end
$var wire 1 e complement1_finish_nr1 $end
$var reg 1 O complement1_finish $end
$var reg 4 f first_nr [3:0] $end
$var reg 4 g first_nr_reg [3:0] $end
$var reg 4 h oper_nr_reg [3:0] $end
$var reg 4 i operation [3:0] $end
$var reg 4 j second_nr [3:0] $end
$var reg 4 k second_nr_reg [3:0] $end
$scope module complement_first_nr $end
$var wire 4 l a [3:0] $end
$var wire 4 m a_xor [3:0] $end
$var wire 4 n aux_xor [3:0] $end
$var wire 4 o b [3:0] $end
$var wire 1 ^ ci $end
$var wire 1 7 clk $end
$var wire 1 p co $end
$var wire 1 N complement1_sel $end
$var wire 1 8 rst $end
$var wire 4 q sum_aux_v2 [3:0] $end
$var wire 4 r sum_aux [3:0] $end
$var wire 1 s done $end
$var wire 1 e complement1_finish $end
$var wire 1 t aux3 $end
$var wire 1 u aux2 $end
$var wire 1 v aux1 $end
$var reg 4 w counter [3:0] $end
$var reg 4 x sum [3:0] $end
$scope module adder0 $end
$var wire 1 y a $end
$var wire 1 z b $end
$var wire 1 ^ ci $end
$var wire 1 7 clk $end
$var wire 1 v co $end
$var wire 1 { out_and1 $end
$var wire 1 | out_and2 $end
$var wire 1 } out_xor $end
$var wire 1 8 rst $end
$var wire 1 ~ sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 !" a $end
$var wire 1 "" b $end
$var wire 1 v ci $end
$var wire 1 7 clk $end
$var wire 1 u co $end
$var wire 1 #" out_and1 $end
$var wire 1 $" out_and2 $end
$var wire 1 %" out_xor $end
$var wire 1 8 rst $end
$var wire 1 &" sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 '" a $end
$var wire 1 (" b $end
$var wire 1 u ci $end
$var wire 1 7 clk $end
$var wire 1 t co $end
$var wire 1 )" out_and1 $end
$var wire 1 *" out_and2 $end
$var wire 1 +" out_xor $end
$var wire 1 8 rst $end
$var wire 1 ," sum $end
$upscope $end
$upscope $end
$scope module complement_second_nr $end
$var wire 4 -" a [3:0] $end
$var wire 4 ." a_xor [3:0] $end
$var wire 4 /" aux_xor [3:0] $end
$var wire 4 0" b [3:0] $end
$var wire 1 ^ ci $end
$var wire 1 7 clk $end
$var wire 1 1" co $end
$var wire 1 N complement1_sel $end
$var wire 1 8 rst $end
$var wire 4 2" sum_aux_v2 [3:0] $end
$var wire 4 3" sum_aux [3:0] $end
$var wire 1 4" done $end
$var wire 1 d complement1_finish $end
$var wire 1 5" aux3 $end
$var wire 1 6" aux2 $end
$var wire 1 7" aux1 $end
$var reg 4 8" counter [3:0] $end
$var reg 4 9" sum [3:0] $end
$scope module adder0 $end
$var wire 1 :" a $end
$var wire 1 ;" b $end
$var wire 1 ^ ci $end
$var wire 1 7 clk $end
$var wire 1 7" co $end
$var wire 1 <" out_and1 $end
$var wire 1 =" out_and2 $end
$var wire 1 >" out_xor $end
$var wire 1 8 rst $end
$var wire 1 ?" sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 @" a $end
$var wire 1 A" b $end
$var wire 1 7" ci $end
$var wire 1 7 clk $end
$var wire 1 6" co $end
$var wire 1 B" out_and1 $end
$var wire 1 C" out_and2 $end
$var wire 1 D" out_xor $end
$var wire 1 8 rst $end
$var wire 1 E" sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 F" a $end
$var wire 1 G" b $end
$var wire 1 6" ci $end
$var wire 1 7 clk $end
$var wire 1 5" co $end
$var wire 1 H" out_and1 $end
$var wire 1 I" out_and2 $end
$var wire 1 J" out_xor $end
$var wire 1 8 rst $end
$var wire 1 K" sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module controller $end
$var wire 1 L" alu_arith_ops $end
$var wire 1 M" alu_imm_ops $end
$var wire 1 N" alu_logic_ops $end
$var wire 1 O" alu_mem_ops $end
$var wire 1 P" alu_ops $end
$var wire 32 Q" and_res [31:0] $end
$var wire 1 R" branch_ops $end
$var wire 1 7 clk $end
$var wire 1 S" imm_ops $end
$var wire 1 T" load_imm_ops $end
$var wire 1 U" load_mem_ops $end
$var wire 1 V" load_ops $end
$var wire 32 W" mem_data_from [31:0] $end
$var wire 32 X" mem_data_to [31:0] $end
$var wire 1 K mem_sel $end
$var wire 1 H mem_we $end
$var wire 1 8 rst $end
$var wire 1 Y" store_mem_ops $end
$var wire 32 Z" xor_res [31:0] $end
$var wire 4 [" opcode [3:0] $end
$var wire 32 \" instruction [31:0] $end
$var wire 32 ]" imm [31:0] $end
$var reg 32 ^" adder_res [31:0] $end
$var reg 1 _" alu_carry $end
$var reg 1 `" alu_negative $end
$var reg 1 a" alu_overflow $end
$var reg 32 b" alu_result [31:0] $end
$var reg 1 c" carry_res_n $end
$var reg 32 d" carry_res_n_1 [31:0] $end
$var reg 10 e" mem_addr [9:0] $end
$var reg 32 f" operand [31:0] $end
$var reg 9 g" pc [8:0] $end
$var reg 32 h" regA [31:0] $end
$var reg 32 i" regB [31:0] $end
$var reg 3 j" regC [2:0] $end
$upscope $end
$scope module cprint $end
$var wire 1 7 clk $end
$var wire 8 k" data_in [7:0] $end
$var wire 1 l" sel $end
$upscope $end
$scope module displayDecoder $end
$var wire 1 7 clk $end
$var wire 1 G display_sel $end
$var wire 2 m" dot [1:0] $end
$var wire 2 n" msg [1:0] $end
$var wire 1 8 rst $end
$var wire 1 o" sgn $end
$var wire 1 H wr_enable $end
$var wire 8 p" bin [7:0] $end
$var wire 2 q" LED_activating_counter [1:0] $end
$var reg 5 r" aux [4:0] $end
$var reg 12 s" bcd [11:0] $end
$var reg 8 t" bin_reg [7:0] $end
$var reg 2 u" disp_dot [1:0] $end
$var reg 4 v" disp_select [3:0] $end
$var reg 8 w" disp_value [7:0] $end
$var reg 4 x" j [3:0] $end
$var reg 20 y" refresh_counter [19:0] $end
$upscope $end
$scope module ram $end
$var wire 1 7 clk $end
$var wire 9 z" data_addr [8:0] $end
$var wire 9 {" data_addr_int [8:0] $end
$var wire 1 |" data_en_int $end
$var wire 32 }" data_in [31:0] $end
$var wire 32 ~" data_in_int [31:0] $end
$var wire 32 !# data_out [31:0] $end
$var wire 1 B data_sel $end
$var wire 1 H data_we $end
$var wire 1 "# data_we_int $end
$var wire 1 ## instr_en $end
$var wire 9 $# pc [8:0] $end
$var reg 32 %# data_out_int [31:0] $end
$var reg 32 &# instruction [31:0] $end
$upscope $end
$scope module real_alu $end
$var wire 1 '# alu_done_aux $end
$var wire 1 P alu_sel $end
$var wire 1 7 clk $end
$var wire 4 (# first_nr [3:0] $end
$var wire 4 )# operation [3:0] $end
$var wire 1 8 rst $end
$var wire 4 *# second_nr [3:0] $end
$var wire 1 H wr_enable $end
$var wire 8 +# result_finish_mult [7:0] $end
$var wire 8 ,# result_finish_div [7:0] $end
$var wire 8 -# result_finish_adder [7:0] $end
$var wire 1 .# multiply_done $end
$var wire 1 /# done_sum $end
$var wire 1 0# division_done $end
$var reg 1 Q alu_done $end
$var reg 1 1# alu_sel_reg $end
$var reg 4 2# first_nr_reg [3:0] $end
$var reg 4 3# operation_reg [3:0] $end
$var reg 8 4# result_uncoded [7:0] $end
$var reg 4 5# second_nr_reg [3:0] $end
$scope module adder4bits $end
$var wire 4 6# a [3:0] $end
$var wire 4 7# b [3:0] $end
$var wire 1 8# ci $end
$var wire 1 7 clk $end
$var wire 1 8 rst $end
$var wire 1 P start $end
$var wire 1 /# done_sum $end
$var wire 1 9# done_aux $end
$var wire 1 :# co $end
$var wire 4 ;# aux_sum_final [3:0] $end
$var wire 1 <# aux3 $end
$var wire 1 =# aux2 $end
$var wire 1 ># aux1 $end
$var reg 4 ?# counter [3:0] $end
$var reg 8 @# sum [7:0] $end
$scope module adder0 $end
$var wire 1 A# a $end
$var wire 1 B# b $end
$var wire 1 8# ci $end
$var wire 1 7 clk $end
$var wire 1 ># co $end
$var wire 1 C# out_and1 $end
$var wire 1 D# out_and2 $end
$var wire 1 E# out_xor $end
$var wire 1 8 rst $end
$var wire 1 F# sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 G# a $end
$var wire 1 H# b $end
$var wire 1 ># ci $end
$var wire 1 7 clk $end
$var wire 1 =# co $end
$var wire 1 I# out_and1 $end
$var wire 1 J# out_and2 $end
$var wire 1 K# out_xor $end
$var wire 1 8 rst $end
$var wire 1 L# sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 M# a $end
$var wire 1 N# b $end
$var wire 1 =# ci $end
$var wire 1 7 clk $end
$var wire 1 <# co $end
$var wire 1 O# out_and1 $end
$var wire 1 P# out_and2 $end
$var wire 1 Q# out_xor $end
$var wire 1 8 rst $end
$var wire 1 R# sum $end
$upscope $end
$scope module adder3 $end
$var wire 1 S# a $end
$var wire 1 T# b $end
$var wire 1 <# ci $end
$var wire 1 7 clk $end
$var wire 1 :# co $end
$var wire 1 U# out_and1 $end
$var wire 1 V# out_and2 $end
$var wire 1 W# out_xor $end
$var wire 1 8 rst $end
$var wire 1 X# sum $end
$upscope $end
$upscope $end
$scope module divide $end
$var wire 4 Y# a [3:0] $end
$var wire 4 Z# b [3:0] $end
$var wire 1 7 clk $end
$var wire 1 8 rst $end
$var wire 1 P start $end
$var wire 4 [# second_nr_aux [3:0] $end
$var wire 4 \# resto [3:0] $end
$var wire 4 ]# quociente_XOR [3:0] $end
$var wire 4 ^# quociente [3:0] $end
$var wire 1 _# multiply_done $end
$var wire 4 `# first_nr_aux [3:0] $end
$var wire 1 a# done_valid_xor $end
$var wire 1 b# done_valid $end
$var wire 1 0# done_division $end
$var wire 1 c# done $end
$var reg 4 d# D_aux [3:0] $end
$var reg 8 e# aux_sumy_v2 [7:0] $end
$var reg 1 f# complement_result_sel $end
$var reg 4 g# counter [3:0] $end
$var reg 4 h# d_aux [3:0] $end
$var reg 8 i# q [7:0] $end
$var reg 1 j# start_aux $end
$scope module div1 $end
$var wire 4 k# D [3:0] $end
$var wire 1 7 clk $end
$var wire 4 l# d [3:0] $end
$var wire 1 8 rst $end
$var wire 1 j# start $end
$var wire 1 b# valid $end
$var wire 4 m# r [3:0] $end
$var reg 8 n# Dext [7:0] $end
$var reg 3 o# cnt [2:0] $end
$var reg 4 p# q [3:0] $end
$upscope $end
$scope module multiply_comple2 $end
$var wire 1 q# ci $end
$var wire 1 7 clk $end
$var wire 1 r# complement1_sel $end
$var wire 4 s# dumb_0 [3:0] $end
$var wire 4 t# first_nr_reg [3:0] $end
$var wire 1 8 rst $end
$var wire 4 u# second_nr_reg [3:0] $end
$var wire 4 v# second_nr_aux [3:0] $end
$var wire 4 w# first_nr_aux [3:0] $end
$var wire 1 x# complement1_finish_nr2 $end
$var wire 1 y# complement1_finish_nr1 $end
$var reg 1 z# complement1_finish $end
$var reg 4 {# first_nr [3:0] $end
$var reg 4 |# second_nr [3:0] $end
$scope module division_complement_first_nr $end
$var wire 4 }# a [3:0] $end
$var wire 4 ~# a_xor [3:0] $end
$var wire 4 !$ aux_xor [3:0] $end
$var wire 4 "$ b [3:0] $end
$var wire 1 q# ci $end
$var wire 1 7 clk $end
$var wire 1 #$ co $end
$var wire 1 r# complement1_sel $end
$var wire 4 $$ dumby [3:0] $end
$var wire 1 8 rst $end
$var wire 4 %$ sum_aux_v2 [3:0] $end
$var wire 4 &$ sum_aux [3:0] $end
$var wire 1 '$ aux3 $end
$var wire 1 ($ aux2 $end
$var wire 1 )$ aux1 $end
$var reg 1 y# complement1_finish $end
$var reg 4 *$ sum [3:0] $end
$scope module adder0 $end
$var wire 1 +$ a $end
$var wire 1 ,$ b $end
$var wire 1 q# ci $end
$var wire 1 7 clk $end
$var wire 1 )$ co $end
$var wire 1 -$ out_and1 $end
$var wire 1 .$ out_and2 $end
$var wire 1 /$ out_xor $end
$var wire 1 8 rst $end
$var wire 1 0$ sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 1$ a $end
$var wire 1 2$ b $end
$var wire 1 )$ ci $end
$var wire 1 7 clk $end
$var wire 1 ($ co $end
$var wire 1 3$ out_and1 $end
$var wire 1 4$ out_and2 $end
$var wire 1 5$ out_xor $end
$var wire 1 8 rst $end
$var wire 1 6$ sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 7$ a $end
$var wire 1 8$ b $end
$var wire 1 ($ ci $end
$var wire 1 7 clk $end
$var wire 1 '$ co $end
$var wire 1 9$ out_and1 $end
$var wire 1 :$ out_and2 $end
$var wire 1 ;$ out_xor $end
$var wire 1 8 rst $end
$var wire 1 <$ sum $end
$upscope $end
$upscope $end
$scope module division_complement_second_nr $end
$var wire 4 =$ a [3:0] $end
$var wire 4 >$ a_xor [3:0] $end
$var wire 4 ?$ aux_xor [3:0] $end
$var wire 4 @$ b [3:0] $end
$var wire 1 q# ci $end
$var wire 1 7 clk $end
$var wire 1 A$ co $end
$var wire 1 r# complement1_sel $end
$var wire 4 B$ dumby [3:0] $end
$var wire 1 8 rst $end
$var wire 4 C$ sum_aux_v2 [3:0] $end
$var wire 4 D$ sum_aux [3:0] $end
$var wire 1 E$ aux3 $end
$var wire 1 F$ aux2 $end
$var wire 1 G$ aux1 $end
$var reg 1 x# complement1_finish $end
$var reg 4 H$ sum [3:0] $end
$scope module adder0 $end
$var wire 1 I$ a $end
$var wire 1 J$ b $end
$var wire 1 q# ci $end
$var wire 1 7 clk $end
$var wire 1 G$ co $end
$var wire 1 K$ out_and1 $end
$var wire 1 L$ out_and2 $end
$var wire 1 M$ out_xor $end
$var wire 1 8 rst $end
$var wire 1 N$ sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 O$ a $end
$var wire 1 P$ b $end
$var wire 1 G$ ci $end
$var wire 1 7 clk $end
$var wire 1 F$ co $end
$var wire 1 Q$ out_and1 $end
$var wire 1 R$ out_and2 $end
$var wire 1 S$ out_xor $end
$var wire 1 8 rst $end
$var wire 1 T$ sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 U$ a $end
$var wire 1 V$ b $end
$var wire 1 F$ ci $end
$var wire 1 7 clk $end
$var wire 1 E$ co $end
$var wire 1 W$ out_and1 $end
$var wire 1 X$ out_and2 $end
$var wire 1 Y$ out_xor $end
$var wire 1 8 rst $end
$var wire 1 Z$ sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module result_div $end
$var wire 4 [$ a [3:0] $end
$var wire 4 \$ a_xor [3:0] $end
$var wire 4 ]$ aux_xor [3:0] $end
$var wire 4 ^$ b [3:0] $end
$var wire 1 _$ ci $end
$var wire 1 7 clk $end
$var wire 1 `$ co $end
$var wire 1 b# complement1_sel $end
$var wire 4 a$ dumby [3:0] $end
$var wire 1 8 rst $end
$var wire 4 b$ sum_aux_v2 [3:0] $end
$var wire 4 c$ sum_aux [3:0] $end
$var wire 1 d$ aux3 $end
$var wire 1 e$ aux2 $end
$var wire 1 f$ aux1 $end
$var reg 1 g$ complement1_finish $end
$var reg 4 h$ sum [3:0] $end
$scope module adder0 $end
$var wire 1 i$ a $end
$var wire 1 j$ b $end
$var wire 1 _$ ci $end
$var wire 1 7 clk $end
$var wire 1 f$ co $end
$var wire 1 k$ out_and1 $end
$var wire 1 l$ out_and2 $end
$var wire 1 m$ out_xor $end
$var wire 1 8 rst $end
$var wire 1 n$ sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 o$ a $end
$var wire 1 p$ b $end
$var wire 1 f$ ci $end
$var wire 1 7 clk $end
$var wire 1 e$ co $end
$var wire 1 q$ out_and1 $end
$var wire 1 r$ out_and2 $end
$var wire 1 s$ out_xor $end
$var wire 1 8 rst $end
$var wire 1 t$ sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 u$ a $end
$var wire 1 v$ b $end
$var wire 1 e$ ci $end
$var wire 1 7 clk $end
$var wire 1 d$ co $end
$var wire 1 w$ out_and1 $end
$var wire 1 x$ out_and2 $end
$var wire 1 y$ out_xor $end
$var wire 1 8 rst $end
$var wire 1 z$ sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module mult $end
$var wire 4 {$ a [3:0] $end
$var wire 4 |$ b [3:0] $end
$var wire 1 7 clk $end
$var wire 1 8 rst $end
$var wire 1 P start $end
$var wire 4 }$ second_nr_aux [3:0] $end
$var wire 8 ~$ resulty [7:0] $end
$var wire 1 .# multiply_done $end
$var wire 4 !% first_nr_aux [3:0] $end
$var wire 1 "% done $end
$var reg 8 #% aux_sumy_v2 [7:0] $end
$var reg 8 $% c [7:0] $end
$var reg 1 %% complement_result_sel $end
$var reg 4 &% counter [3:0] $end
$scope module multiply_comple2 $end
$var wire 1 '% ci $end
$var wire 1 7 clk $end
$var wire 1 (% complement1_sel $end
$var wire 4 )% dumb_0 [3:0] $end
$var wire 4 *% first_nr_reg [3:0] $end
$var wire 1 8 rst $end
$var wire 4 +% second_nr_reg [3:0] $end
$var wire 4 ,% second_nr_aux [3:0] $end
$var wire 4 -% first_nr_aux [3:0] $end
$var wire 1 .% complement1_finish_nr2 $end
$var wire 1 /% complement1_finish_nr1 $end
$var reg 1 0% complement1_finish $end
$var reg 4 1% first_nr [3:0] $end
$var reg 4 2% second_nr [3:0] $end
$scope module multiply_complement_first_nr $end
$var wire 4 3% a [3:0] $end
$var wire 4 4% a_xor [3:0] $end
$var wire 4 5% aux_xor [3:0] $end
$var wire 4 6% b [3:0] $end
$var wire 1 '% ci $end
$var wire 1 7 clk $end
$var wire 1 7% co $end
$var wire 1 (% complement1_sel $end
$var wire 4 8% dumby [3:0] $end
$var wire 1 8 rst $end
$var wire 4 9% sum_aux_v2 [3:0] $end
$var wire 4 :% sum_aux [3:0] $end
$var wire 1 ;% aux3 $end
$var wire 1 <% aux2 $end
$var wire 1 =% aux1 $end
$var reg 1 /% complement1_finish $end
$var reg 4 >% sum [3:0] $end
$scope module adder0 $end
$var wire 1 ?% a $end
$var wire 1 @% b $end
$var wire 1 '% ci $end
$var wire 1 7 clk $end
$var wire 1 =% co $end
$var wire 1 A% out_and1 $end
$var wire 1 B% out_and2 $end
$var wire 1 C% out_xor $end
$var wire 1 8 rst $end
$var wire 1 D% sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 E% a $end
$var wire 1 F% b $end
$var wire 1 =% ci $end
$var wire 1 7 clk $end
$var wire 1 <% co $end
$var wire 1 G% out_and1 $end
$var wire 1 H% out_and2 $end
$var wire 1 I% out_xor $end
$var wire 1 8 rst $end
$var wire 1 J% sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 K% a $end
$var wire 1 L% b $end
$var wire 1 <% ci $end
$var wire 1 7 clk $end
$var wire 1 ;% co $end
$var wire 1 M% out_and1 $end
$var wire 1 N% out_and2 $end
$var wire 1 O% out_xor $end
$var wire 1 8 rst $end
$var wire 1 P% sum $end
$upscope $end
$upscope $end
$scope module multiply_complement_second_nr $end
$var wire 4 Q% a [3:0] $end
$var wire 4 R% a_xor [3:0] $end
$var wire 4 S% aux_xor [3:0] $end
$var wire 4 T% b [3:0] $end
$var wire 1 '% ci $end
$var wire 1 7 clk $end
$var wire 1 U% co $end
$var wire 1 (% complement1_sel $end
$var wire 4 V% dumby [3:0] $end
$var wire 1 8 rst $end
$var wire 4 W% sum_aux_v2 [3:0] $end
$var wire 4 X% sum_aux [3:0] $end
$var wire 1 Y% aux3 $end
$var wire 1 Z% aux2 $end
$var wire 1 [% aux1 $end
$var reg 1 .% complement1_finish $end
$var reg 4 \% sum [3:0] $end
$scope module adder0 $end
$var wire 1 ]% a $end
$var wire 1 ^% b $end
$var wire 1 '% ci $end
$var wire 1 7 clk $end
$var wire 1 [% co $end
$var wire 1 _% out_and1 $end
$var wire 1 `% out_and2 $end
$var wire 1 a% out_xor $end
$var wire 1 8 rst $end
$var wire 1 b% sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 c% a $end
$var wire 1 d% b $end
$var wire 1 [% ci $end
$var wire 1 7 clk $end
$var wire 1 Z% co $end
$var wire 1 e% out_and1 $end
$var wire 1 f% out_and2 $end
$var wire 1 g% out_xor $end
$var wire 1 8 rst $end
$var wire 1 h% sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 i% a $end
$var wire 1 j% b $end
$var wire 1 Z% ci $end
$var wire 1 7 clk $end
$var wire 1 Y% co $end
$var wire 1 k% out_and1 $end
$var wire 1 l% out_and2 $end
$var wire 1 m% out_xor $end
$var wire 1 8 rst $end
$var wire 1 n% sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module multiply_complement_result $end
$var wire 8 o% a [7:0] $end
$var wire 8 p% a_xor [7:0] $end
$var wire 8 q% aux_xor [7:0] $end
$var wire 8 r% b [7:0] $end
$var wire 1 s% ci $end
$var wire 1 7 clk $end
$var wire 1 t% co $end
$var wire 1 %% complement1_sel $end
$var wire 8 u% dumby [7:0] $end
$var wire 1 8 rst $end
$var wire 8 v% sum_aux [7:0] $end
$var wire 1 w% aux8 $end
$var wire 1 x% aux7 $end
$var wire 1 y% aux6 $end
$var wire 1 z% aux5 $end
$var wire 1 {% aux4 $end
$var wire 1 |% aux3 $end
$var wire 1 }% aux2 $end
$var wire 1 ~% aux1 $end
$var reg 1 !& complement1_finish $end
$var reg 8 "& sum [7:0] $end
$scope module adder0 $end
$var wire 1 #& a $end
$var wire 1 $& b $end
$var wire 1 s% ci $end
$var wire 1 7 clk $end
$var wire 1 ~% co $end
$var wire 1 %& out_and1 $end
$var wire 1 && out_and2 $end
$var wire 1 '& out_xor $end
$var wire 1 8 rst $end
$var wire 1 (& sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 )& a $end
$var wire 1 *& b $end
$var wire 1 ~% ci $end
$var wire 1 7 clk $end
$var wire 1 }% co $end
$var wire 1 +& out_and1 $end
$var wire 1 ,& out_and2 $end
$var wire 1 -& out_xor $end
$var wire 1 8 rst $end
$var wire 1 .& sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 /& a $end
$var wire 1 0& b $end
$var wire 1 }% ci $end
$var wire 1 7 clk $end
$var wire 1 |% co $end
$var wire 1 1& out_and1 $end
$var wire 1 2& out_and2 $end
$var wire 1 3& out_xor $end
$var wire 1 8 rst $end
$var wire 1 4& sum $end
$upscope $end
$scope module adder3 $end
$var wire 1 5& a $end
$var wire 1 6& b $end
$var wire 1 |% ci $end
$var wire 1 7 clk $end
$var wire 1 {% co $end
$var wire 1 7& out_and1 $end
$var wire 1 8& out_and2 $end
$var wire 1 9& out_xor $end
$var wire 1 8 rst $end
$var wire 1 :& sum $end
$upscope $end
$scope module adder4 $end
$var wire 1 ;& a $end
$var wire 1 <& b $end
$var wire 1 {% ci $end
$var wire 1 7 clk $end
$var wire 1 z% co $end
$var wire 1 =& out_and1 $end
$var wire 1 >& out_and2 $end
$var wire 1 ?& out_xor $end
$var wire 1 8 rst $end
$var wire 1 @& sum $end
$upscope $end
$scope module adder5 $end
$var wire 1 A& a $end
$var wire 1 B& b $end
$var wire 1 z% ci $end
$var wire 1 7 clk $end
$var wire 1 y% co $end
$var wire 1 C& out_and1 $end
$var wire 1 D& out_and2 $end
$var wire 1 E& out_xor $end
$var wire 1 8 rst $end
$var wire 1 F& sum $end
$upscope $end
$scope module adder6 $end
$var wire 1 G& a $end
$var wire 1 H& b $end
$var wire 1 y% ci $end
$var wire 1 7 clk $end
$var wire 1 x% co $end
$var wire 1 I& out_and1 $end
$var wire 1 J& out_and2 $end
$var wire 1 K& out_xor $end
$var wire 1 8 rst $end
$var wire 1 L& sum $end
$upscope $end
$scope module adder7 $end
$var wire 1 M& a $end
$var wire 1 N& b $end
$var wire 1 x% ci $end
$var wire 1 7 clk $end
$var wire 1 w% co $end
$var wire 1 O& out_and1 $end
$var wire 1 P& out_and2 $end
$var wire 1 Q& out_xor $end
$var wire 1 8 rst $end
$var wire 1 R& sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module regf $end
$var wire 4 S& addr [3:0] $end
$var wire 1 7 clk $end
$var wire 32 T& data_in [31:0] $end
$var wire 1 > sel $end
$var wire 1 H we $end
$var wire 32 U& data_out [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx U&
bx T&
bx S&
xR&
xQ&
0P&
xO&
0N&
xM&
xL&
xK&
0J&
xI&
0H&
xG&
xF&
xE&
0D&
xC&
0B&
xA&
x@&
x?&
0>&
x=&
0<&
x;&
x:&
x9&
08&
x7&
06&
x5&
x4&
x3&
02&
x1&
00&
x/&
x.&
x-&
0,&
x+&
0*&
x)&
x(&
x'&
0&&
x%&
0$&
x#&
bx "&
x!&
x~%
x}%
x|%
x{%
xz%
xy%
xx%
xw%
bx v%
b0 u%
zt%
1s%
b0 r%
b11111111 q%
bx p%
bx o%
xn%
xm%
0l%
xk%
0j%
xi%
xh%
xg%
0f%
xe%
0d%
xc%
xb%
xa%
0`%
x_%
0^%
x]%
bx \%
x[%
xZ%
xY%
bzxxx X%
b0xxx W%
b0 V%
zU%
b0 T%
b1111 S%
bx R%
bx Q%
xP%
xO%
0N%
xM%
0L%
xK%
xJ%
xI%
0H%
xG%
0F%
xE%
xD%
xC%
0B%
xA%
0@%
x?%
bx >%
x=%
x<%
x;%
bzxxx :%
b0xxx 9%
b0 8%
z7%
b0 6%
b1111 5%
bx 4%
bx 3%
bx 2%
bx 1%
x0%
x/%
x.%
bx -%
bx ,%
bx +%
bx *%
b0 )%
1(%
1'%
bx &%
1%%
bx $%
bx #%
x"%
bx !%
bx ~$
bx }$
bx |$
bx {$
xz$
xy$
0x$
xw$
0v$
xu$
xt$
xs$
0r$
xq$
0p$
xo$
xn$
xm$
0l$
xk$
0j$
xi$
bx h$
xg$
xf$
xe$
xd$
bzxxx c$
b0xxx b$
b0 a$
z`$
1_$
b0 ^$
b1111 ]$
b0xxx \$
b1xxx [$
xZ$
xY$
0X$
xW$
0V$
xU$
xT$
xS$
0R$
xQ$
0P$
xO$
xN$
xM$
0L$
xK$
0J$
xI$
bx H$
xG$
xF$
xE$
bzxxx D$
b0xxx C$
b0 B$
zA$
b0 @$
b1111 ?$
bx >$
bx =$
x<$
x;$
0:$
x9$
08$
x7$
x6$
x5$
04$
x3$
02$
x1$
x0$
x/$
0.$
x-$
0,$
x+$
bx *$
x)$
x($
x'$
bzxxx &$
b0xxx %$
b0 $$
z#$
b0 "$
b1111 !$
bx ~#
bx }#
bx |#
bx {#
xz#
xy#
xx#
bx w#
bx v#
bx u#
bx t#
b0 s#
1r#
1q#
bx p#
bx o#
bx n#
bx m#
bx l#
bx k#
0j#
bx i#
bx h#
bx g#
1f#
bx e#
bx d#
xc#
xb#
xa#
bx `#
x_#
bx ^#
bx ]#
bx \#
bx [#
bx Z#
bx Y#
xX#
xW#
xV#
xU#
xT#
xS#
xR#
xQ#
xP#
xO#
xN#
xM#
xL#
xK#
xJ#
xI#
xH#
xG#
xF#
xE#
xD#
0C#
xB#
xA#
bx @#
bx ?#
x>#
x=#
x<#
bx ;#
x:#
x9#
08#
bx 7#
bx 6#
bx 5#
bx 4#
bx 3#
bx 2#
x1#
x0#
x/#
x.#
bx -#
bx ,#
bx +#
bx *#
bx )#
bx (#
x'#
bx &#
bx %#
bx $#
1##
x"#
bx !#
bx ~"
bx }"
x|"
bx {"
bx z"
bx y"
bx x"
bx w"
bx v"
b0 u"
bx t"
bx s"
bx r"
bx q"
bx p"
0o"
b0 n"
b0 m"
xl"
bx k"
bx j"
bx i"
bx h"
bx g"
b0 f"
bx e"
bx d"
xc"
b0 b"
0a"
0`"
0_"
bx ^"
bx ]"
bx \"
bx ["
bx Z"
xY"
bx X"
b0 W"
xV"
xU"
xT"
xS"
xR"
b0 Q"
xP"
xO"
xN"
xM"
xL"
xK"
xJ"
0I"
xH"
0G"
xF"
xE"
xD"
0C"
xB"
0A"
x@"
x?"
x>"
0="
x<"
0;"
x:"
bx 9"
bx 8"
x7"
x6"
x5"
x4"
bzxxx 3"
bx 2"
z1"
b0 0"
b1111 /"
bx ."
bx -"
x,"
x+"
0*"
x)"
0("
x'"
x&"
x%"
0$"
x#"
0""
x!"
x~
x}
0|
x{
0z
xy
bx x
bx w
xv
xu
xt
xs
bzxxx r
bx q
zp
b0 o
b1111 n
bx m
bx l
bx k
bx j
bx i
bx h
bx g
bx f
xe
xd
bx c
bx b
bx a
b0 `
x_
1^
x]
x\
b0 [
xZ
xY
xX
bx W
bx V
bx U
b1010010 T
bx S
bx R
xQ
xP
xO
xN
xM
bx L
xK
b0 J
bx I
xH
xG
bx F
bx E
xD
bx C
xB
bx A
bx @
bx ?
x>
bx =
bx <
b1010010 ;
bx :
bx 9
08
17
b1010010 6
15
04
bx 3
bx 2
x1
bx 0
bx /
bx .
bx -
bx ,
bx +
bx *
bx )
bx (
bx '
bx &
bx %
bx $
bx #
bx "
bx !
$end
#5000
07
#10000
17
#11000
1E$
1Y%
1'$
1;%
15"
1t
1W$
0Z$
1k%
0n%
19$
0<$
1M%
0P%
1H"
0K"
1)"
0,"
1F$
1Z%
1($
1<%
16"
1u
1Q$
0T$
1e%
0h%
13$
06$
1G%
0J%
1B"
0E"
1#"
0&"
1G$
b0 C$
1[%
b0 W%
0R#
0X#
1)$
b0 %$
1=%
b0 9%
17"
1v
1K$
bz000 D$
0N$
1_%
bz000 X%
0b%
0L#
0=#
0<#
0:#
1-$
bz000 &$
00$
1A%
bz000 :%
0D%
1<"
bz000 3"
0?"
1{
bz000 r
0~
b11000000 3
b11000000 S
b11000000 w"
1M$
1S$
1Y$
1a%
1g%
1m%
b0 ;#
0F#
0>#
0I#
0O#
0U#
1/$
15$
1;$
1C%
1I%
1O%
1>"
1D"
1J"
1}
1%"
1+"
b0 r"
b1110 2
b1110 R
b1110 v"
1I$
1O$
1U$
1]%
1c%
1i%
0E#
0D#
0K#
0J#
0Q#
0P#
0W#
0V#
1+$
11$
17$
1?%
1E%
1K%
1:"
1@"
1F"
1y
1!"
1'"
b0 ^"
0c"
b0 d"
b0 Z"
b0 k"
b0 a
b1000 x"
b0 s"
b0 q"
0B#
0H#
0N#
0T#
b1111 >$
b1111 R%
0A#
0G#
0M#
0S#
b1111 ~#
b1111 4%
b1111 ."
b0 2"
b1111 m
b0 q
b0 @
b0 g"
b0 $#
b0 ~"
b0 I
b0 X"
b0 }"
b0 T&
b0 h"
b0 i"
b0 j"
b0 t"
b0 y"
0/%
b0 -%
b0 >%
0.%
b0 ,%
b0 \%
0!&
b0 ~$
b0 "&
0y#
b0 w#
b0 *$
0x#
b0 v#
b0 H$
0g$
b0 ]#
b0 h$
b0 3#
b0 5#
b0 7#
b0 Z#
b0 u#
b0 =$
b0 |$
b0 +%
b0 Q%
b0 2#
b0 6#
b0 Y#
b0 t#
b0 }#
b0 {$
b0 *%
b0 3%
0O
b0 h
b0 k
b0 -"
b0 g
b0 l
18
#15000
07
#20000
1w%
1O&
0R&
1x%
1I&
0L&
1y%
1C&
0F&
1z%
1=&
0@&
1{%
17&
0:&
b1 ^"
b1 d"
b1 Z"
1|%
b1 f"
11&
04&
b1 J
b1 [
b1 W"
1}%
1+&
0.&
1K
b0 ?
b0 U
b0 U&
1~%
b110 S&
b11000110 {"
b11000110 z"
01
0M
0>
0|"
0B
0G
0P
0N
0D
0\
0]
0Y
1Z
1%&
b0 v%
0(&
b1011000110 L
b1011000110 W
b1011000110 e"
0O"
0P"
0l"
1V"
0S"
1'&
1-&
13&
19&
1?&
1E&
1K&
1Q&
0'#
b1011000110 ]"
0R"
0N"
0L"
0M"
0"#
0H
0Y"
1U"
0T"
1#&
1)&
1/&
15&
1;&
1A&
1G&
1M&
0_
b1000 ["
b11111111 p%
b10000000000000000000001011000110 E
b10000000000000000000001011000110 \"
b10000000000000000000001011000110 &#
b0 -#
b0 @#
09#
0/#
b100 ?#
b0 #%
b0 o%
0.#
0"%
b100 &%
b0 e#
00#
0a#
0_#
0c#
b100 g#
b0 c
b0 x
0e
0s
b100 w
b0 b
b0 9"
0d
04"
b100 8"
b0 =
b0 p"
b0 4#
1x#
1y#
1.%
1/%
17
#21000
b10101 :
08
#25000
07
#30000
b1 f"
b10 ^"
b10 d"
b0 Z"
b1 Q"
b1 k"
b1 a
b1 J
b1 [
b1 W"
b101 8"
b101 w
b101 g#
b101 &%
b101 ?#
b1 @
b1 g"
b1 $#
b1 ~"
b1 I
b1 X"
b1 }"
b1 T&
b1 h"
b1 y"
b0 }$
b0 2%
b0 !%
b0 1%
10%
1!&
b0 [#
b0 |#
b0 `#
b0 {#
1z#
0Q
17
#35000
07
#40000
0K
b0 J
b0 [
b0 W"
b1 ^"
b1 d"
b1 Z"
b0 Q"
b0 S&
b0 {"
b0 z"
0|"
0B
0Z
1R"
b0 f"
b0 L
b0 W
b0 e"
0V"
b0 ]"
0U"
b1100 ["
b11000000000000000000000000000000 E
b11000000000000000000000000000000 \"
b11000000000000000000000000000000 &#
b110 ?#
b110 &%
b110 g#
b110 w
b110 8"
b10 y"
b10 @
b10 g"
b10 $#
17
#45000
07
#50000
0R"
1P"
1L"
1S"
1M"
b0 ["
b0 ^"
b0 d"
b0 Z"
b0 k"
b0 a
b111 8"
b111 w
1c#
b111 g#
1"%
b111 &%
b111 ?#
b0 E
b0 \"
b0 &#
b11 @
b11 g"
b11 $#
b0 ~"
b0 I
b0 X"
b0 }"
b0 T&
b0 h"
b11 y"
17
#55000
07
#60000
b1010010 ^"
b1010010 d"
b1010010 Z"
b1010010 f"
b1010010 J
b1010010 [
b1010010 W"
1]
1K
b11000000 {"
b11000000 z"
0P"
b1011000000 L
b1011000000 W
b1011000000 e"
0O"
0L"
0S"
1V"
1'#
b1011000000 ]"
0M"
1U"
b1000 ["
b10000000000000000000001011000000 E
b10000000000000000000001011000000 \"
b10000000000000000000001011000000 &#
b1000 ?#
1.#
0"%
b1000 &%
b0 +#
b0 $%
1_#
0c#
b1000 g#
b1000 w
b1000 8"
b100 y"
b100 @
b100 g"
b100 $#
17
#65000
07
#70000
bx ?
bx U
bx U&
b0 {"
b0 z"
1>
0]
0'#
b1000000000 L
b1000000000 W
b1000000000 e"
0V"
b1000000000 ]"
1"#
1H
1Y"
0U"
b0 f"
b1001 ["
b1010010 ^"
b1010010 d"
b1010010 Z"
b0 Q"
b1010010 k"
b1010010 a
bx J
bx [
bx W"
b1001 8"
b1001 w
0_#
b1001 g#
0.#
b1001 &%
b1001 ?#
b10010000000000000000001000000000 E
b10010000000000000000001000000000 \"
b10010000000000000000001000000000 &#
b101 @
b101 g"
b101 $#
b1010010 ~"
b1010010 I
b1010010 X"
b1010010 }"
b1010010 T&
b1010010 h"
b101 y"
1Q
17
#71000
bx J
bx [
bx W"
14
05
b100 6
b100 ;
b100 T
#75000
07
#80000
b1010011 ^"
b1010011 d"
b1010011 Z"
b0 Q"
b1010 S&
b11001010 {"
b11001010 z"
1Y
0>
b1 f"
b1011001010 L
b1011001010 W
b1011001010 e"
1V"
b1011001010 ]"
0"#
0H
0Y"
1U"
b1000 ["
b0 ?
b0 U
b0 U&
b1 J
b1 [
b1 W"
b10000000000000000000001011001010 E
b10000000000000000000001011001010 \"
b10000000000000000000001011001010 &#
b1010010 !
b1010 ?#
b1010 &%
1a#
b1010 g#
b1010 w
b1010 8"
0Q
b110 y"
b110 @
b110 g"
b110 $#
17
#85000
07
#90000
0K
b0 J
b0 [
b0 W"
b101 S&
b101 {"
b101 z"
0|"
0B
0Y
1R"
b0 f"
b101 L
b101 W
b101 e"
0V"
1'#
b101 ]"
0U"
b1100 ["
b1 ^"
b1 d"
b1 Z"
b0 Q"
b1 k"
b1 a
b1011 8"
b1011 w
b0xxxx ,#
b0xxxx i#
10#
0a#
b1011 g#
b1011 &%
b1011 ?#
b11000000000000000000000000000101 E
b11000000000000000000000000000101 \"
b11000000000000000000000000000101 &#
b111 @
b111 g"
b111 $#
b1 ~"
b1 I
b1 X"
b1 }"
b1 T&
b1 h"
b111 y"
17
#95000
07
#100000
b0 S&
b0 {"
b0 z"
0R"
1P"
b0 L
b0 W
b0 e"
1L"
1S"
b0 ]"
1M"
0'#
b0 ["
b0 ^"
b0 d"
b0 Z"
b0 k"
b0 a
b0 E
b0 \"
b0 &#
00#
b1100 g#
1Q
b1000 y"
b0 ~"
b0 I
b0 X"
b0 }"
b0 T&
b0 h"
b1000 @
b1000 g"
b1000 $#
17
#105000
07
#110000
b100 ^"
b100 d"
b100 Z"
b100 f"
b100 J
b100 [
b100 W"
1\
1K
b1110 S&
b11001110 {"
b11001110 z"
0P"
b1011001110 L
b1011001110 W
b1011001110 e"
0O"
0L"
0S"
1V"
b1011001110 ]"
0M"
1U"
b1000 ["
b10000000000000000000001011001110 E
b10000000000000000000001011001110 \"
b10000000000000000000001011001110 &#
b1001 @
b1001 g"
b1001 $#
b1001 y"
0Q
17
#115000
07
#120000
bx ?
bx U
bx U&
bx J
bx [
bx W"
b1 S&
b1 {"
b1 z"
1>
0\
b0 f"
b1000000001 L
b1000000001 W
b1000000001 e"
0V"
b1000000001 ]"
1"#
1H
1Y"
0U"
b1001 ["
b100 ^"
b100 d"
b100 Z"
b0 Q"
b100 k"
b100 a
b10010000000000000000001000000001 E
b10010000000000000000001000000001 \"
b10010000000000000000001000000001 &#
b1010 y"
b100 ~"
b100 I
b100 X"
b100 }"
b100 T&
b100 h"
b1010 @
b1010 g"
b1010 $#
17
#125000
07
#130000
b1010110 ^"
b1010110 d"
b1010110 Z"
b0 Q"
b0 S&
b0 {"
b0 z"
1>
b1010010 f"
b1000000000 L
b1000000000 W
b1000000000 e"
1V"
b1010010 J
b1010010 [
b1010010 W"
b1000000000 ]"
0"#
0H
0Y"
1U"
b1010010 ?
b1010010 U
b1010010 U&
b1000 ["
b100 "
b10000000000000000000001000000000 E
b10000000000000000000001000000000 \"
b10000000000000000000001000000000 &#
b1011 @
b1011 g"
b1011 $#
b1011 y"
17
#135000
07
#140000
1c"
0K
b0 J
b0 [
b0 W"
b0 ?
b0 U
b0 U&
b1111 S&
b111111111 {"
b111111111 z"
01
0>
1P"
b11111111111111111111111111111111 f"
b1111111111 L
b1111111111 W
b1111111111 e"
1S"
0V"
b11111111111111111111111111111111 ]"
1M"
0U"
b10100100 b"
b11 ["
b1010001 ^"
b10000000000000000000000001010001 d"
b11111111111111111111111110101101 Z"
b1010010 Q"
b1010010 k"
b1010010 a
b111111111111111111111111111111 E
b111111111111111111111111111111 \"
b111111111111111111111111111111 &#
b1100 y"
b1010010 ~"
b1010010 I
b1010010 X"
b1010010 }"
b1010010 T&
b1010010 h"
b1100 @
b1100 g"
b1100 $#
17
#145000
07
#150000
b101001000 b"
b10100011 ^"
b10000000000000000000000010100011 d"
b11111111111111111111111101011011 Z"
b10100100 Q"
b10100100 k"
b10100100 a
b1101 @
b1101 g"
b1101 $#
b10100100 ~"
b10100100 I
b10100100 X"
b10100100 }"
b10100100 T&
b10100100 h"
b1101 y"
17
#155000
07
#160000
b1010010000 b"
b101000111 ^"
b10000000000000000000000101000111 d"
b11111111111111111111111010110111 Z"
b101001000 Q"
b1001000 k"
b101001000 a
b1110 y"
b101001000 ~"
b101001000 I
b101001000 X"
b101001000 }"
b101001000 T&
b101001000 h"
b1110 @
b1110 g"
b1110 $#
17
#165000
07
#170000
b10100100000 b"
b1010001111 ^"
b10000000000000000000001010001111 d"
b11111111111111111111110101101111 Z"
b1010010000 Q"
b10010000 k"
b1010010000 a
b1111 @
b1111 g"
b1111 $#
b1010010000 ~"
b1010010000 I
b1010010000 X"
b1010010000 }"
b1010010000 T&
b1010010000 h"
b1111 y"
17
#175000
07
#180000
b100 J
b100 [
b100 W"
b100 ?
b100 U
b100 U&
1>
1K
0c"
b1 S&
b1 {"
b1 z"
b100 f"
b1000000001 L
b1000000001 W
b1000000001 e"
1O"
0S"
b1000000001 ]"
1N"
0M"
0`"
b101 ["
b10100100100 b"
b10100100100 ^"
b10100100100 d"
b10100100100 Z"
b0 Q"
b100000 k"
b10100100000 a
b1010000000000000000001000000001 E
b1010000000000000000001000000001 \"
b1010000000000000000001000000001 &#
b10000 y"
b10100100000 ~"
b10100100000 I
b10100100000 X"
b10100100000 }"
b10100100000 T&
b10100100000 h"
b10000 @
b10000 g"
b10000 $#
17
#185000
07
#190000
b0 J
b0 [
b0 W"
b0 ?
b0 U
b0 U&
b10 S&
b11010010 {"
b11010010 z"
1N
0>
0P"
b0 f"
b1011010010 L
b1011010010 W
b1011010010 e"
0O"
b1011010010 ]"
0N"
1"#
1H
1Y"
b1001 ["
b0 b"
b10100100100 ^"
b10100100100 d"
b10100100100 Z"
b0 Q"
b100100 k"
b10100100100 a
b10010000000000000000001011010010 E
b10010000000000000000001011010010 \"
b10010000000000000000001011010010 &#
b10001 @
b10001 g"
b10001 $#
b10100100100 ~"
b10100100100 I
b10100100100 X"
b10100100100 }"
b10100100100 T&
b10100100100 h"
b10001 y"
17
#195000
07
#200000
05"
0u
0H"
1K"
0#"
1&"
1X
06"
b110 2"
0v
0t
b11 q
b110 S&
b11010110 {"
b11010110 z"
1P
0N
0B"
bz110 3"
1E"
0{
1~
0)"
bz011 r
0,"
b1011010110 L
b1011010110 W
b1011010110 e"
1V"
0D"
0}
0+"
b1011010110 ]"
0"#
0H
0Y"
1U"
0@"
0y
0'"
b1000 ["
b1101 ."
b1010 m
b10000000000000000000001011010110 E
b10000000000000000000001011010110 \"
b10000000000000000000001011010110 &#
b0 w
b0 8"
b100 h
b10 k
b10 -"
b101 g
b101 l
b10010 y"
b10010 @
b10010 g"
b10010 $#
17
#205000
07
#210000
0K
b0 J
b0 [
b0 W"
b1 S&
b10001 {"
b10001 z"
0|"
0B
0P
1R"
b10001 L
b10001 W
b10001 e"
0V"
b10001 ]"
0U"
b1100 ["
b0 ^"
b0 d"
b0 Z"
b0 k"
b0 a
14"
b1 8"
1s
b1 w
b0 g#
b0 &%
b0 ?#
b11000000000000000000000000010001 E
b11000000000000000000000000010001 \"
b11000000000000000000000000010001 &#
b10011 @
b10011 g"
b10011 $#
b0 ~"
b0 I
b0 X"
b0 }"
b0 T&
b0 h"
b10011 y"
17
#215000
07
#220000
b0 S&
b0 {"
b0 z"
0R"
1`"
b11111111111111111111111111111111 b"
1P"
b0 L
b0 W
b0 e"
1L"
1S"
b0 ]"
1M"
1_
b0 ["
b11111111111111111111111111111111 ^"
b1111111111111111111111111111111 d"
b11111111111111111111111111111111 Z"
b11111111 k"
b111111111111 a
b0 E
b0 \"
b0 &#
b1 ?#
b1 &%
b1 g#
1e
0s
b10 w
b101 c
b101 x
1d
04"
b10 8"
b10 b
b10 9"
b10100 y"
b11111111111111111111111111111111 ~"
b11111111111111111111111111111111 I
b11111111111111111111111111111111 X"
b11111111111111111111111111111111 }"
b11111111111111111111111111111111 T&
b11111111111111111111111111111111 h"
b10001 @
b10001 g"
b10001 $#
17
#225000
07
#230000
b0 ^"
1c"
b10000000000000000000000000000000 d"
b11111111111111111111111111111110 Z"
b1 Q"
b1 f"
b1 J
b1 [
b1 W"
1P
1K
b110 S&
b11010110 {"
b11010110 z"
0P"
b1011010110 L
b1011010110 W
b1011010110 e"
0O"
0L"
0S"
1V"
0_
b1011010110 ]"
0M"
1U"
0`"
b0 b"
b1000 ["
0d
b11 8"
0e
b11 w
b10 g#
b10 &%
19#
b10 ?#
b10000000000000000000001011010110 E
b10000000000000000000001011010110 \"
b10000000000000000000001011010110 &#
b10010 @
b10010 g"
b10010 $#
b100 j"
b10101 y"
b100 A
b100 i
b100 )#
b10 <
b10 j
b10 *#
b101 F
b101 f
b101 (#
1O
17
#235000
07
#240000
0K
b1 S&
b10001 {"
b10001 z"
0|"
0B
0P
1R"
b10001 L
b10001 W
b10001 e"
0V"
b0 Q"
b10001 ]"
0U"
b0 f"
b1100 ["
b0 J
b0 [
b0 W"
b1 ^"
0c"
b1 d"
b1 Z"
b1 k"
b1 a
b11000000000000000000000000010001 E
b11000000000000000000000000010001 \"
b11000000000000000000000000010001 &#
09#
b0 ?#
b0 &%
b0 g#
1j#
b0 h#
b0 l#
b0 d#
b0 k#
b100 w
b100 8"
0O
b10110 y"
b1 ~"
b1 I
b1 X"
b1 }"
b1 T&
b1 h"
b10011 @
b10011 g"
b10011 $#
17
#245000
07
#250000
0t$
0z$
0f$
b1 b$
0e$
0d$
0k$
bz001 c$
1n$
0q$
0w$
0m$
0s$
0y$
b0 S&
b0 {"
b0 z"
0R"
1P"
0i$
0o$
0u$
b0 L
b0 W
b0 e"
1L"
1S"
b0 \$
b0 ]"
1M"
b1111 [$
b0 ["
b0 ^"
b0 d"
b0 Z"
b0 k"
b0 a
b101 8"
b101 w
0j#
b1 g#
0b#
b100 o#
b1111 ^#
b1111 p#
b1 &%
b1 ?#
b0 E
b0 \"
b0 &#
b10100 @
b10100 g"
b10100 $#
b0 ~"
b0 I
b0 X"
b0 }"
b0 T&
b0 h"
b10111 y"
17
#255000
07
#260000
1P
1K
b110 S&
b11010110 {"
b11010110 z"
0P"
b1011010110 L
b1011010110 W
b1011010110 e"
0O"
0L"
0S"
b1011010110 ]"
0M"
1"#
1H
1Y"
b1001 ["
b0 \#
b0 m#
b10010000000000000000001011010110 E
b10010000000000000000001011010110 \"
b10010000000000000000001011010110 &#
19#
b10 ?#
b10 &%
b11 o#
b0 n#
b10 g#
b110 w
b110 8"
b11000 y"
b0 j"
b10101 @
b10101 g"
b10101 $#
17
#265000
07
#270000
0E$
0Y%
0($
0<%
0W$
1Z$
0k%
1n%
03$
16$
0G%
1J%
0F$
b110 C$
0Z%
b110 W%
0)$
0'$
b11 %$
0=%
0;%
b11 9%
b1010 S&
b11011010 {"
b11011010 z"
1G
0P
0Q$
bz110 D$
1T$
0e%
bz110 X%
1h%
0-$
10$
09$
bz011 &$
0<$
0A%
1D%
0M%
bz011 :%
0P%
b1011011010 L
b1011011010 W
b1011011010 e"
1V"
1L#
0S$
0g%
1F#
b111 ;#
1R#
0/$
0;$
0C%
0O%
b1011011010 ]"
0"#
0H
0Y"
1U"
1K#
0O$
0c%
1E#
1Q#
0+$
07$
0?%
0K%
b1000 ["
1H#
b1101 >$
b1101 R%
1A#
1M#
b1010 ~#
b1010 4%
b111 8"
b111 w
1j#
b0 g#
b10 o#
b0 &%
09#
b0 ?#
b10000000000000000000001011011010 E
b10000000000000000000001011011010 \"
b10000000000000000000001011011010 &#
b10110 @
b10110 g"
b10110 $#
b11001 y"
b100 3#
b10 5#
b10 7#
b10 Z#
b10 u#
b10 =$
b10 |$
b10 +%
b10 Q%
b101 2#
b101 6#
b101 Y#
b101 t#
b101 }#
b101 {$
b101 *%
b101 3%
11#
17
#275000
07
#280000
0K
b0 J
b0 [
b0 W"
b101 S&
b10101 {"
b10101 z"
0|"
0B
0G
1R"
b10101 L
b10101 W
b10101 e"
0V"
b10101 ]"
0U"
b1100 ["
b11000000000000000000000000010101 E
b11000000000000000000000000010101 \"
b11000000000000000000000000010101 &#
b1 ?#
b1 &%
b100 o#
b1 g#
0j#
b1000 w
b1000 8"
b10 v#
b10 H$
b101 w#
b101 *$
b10 ,%
b10 \%
b101 -%
b101 >%
b11010 y"
b10111 @
b10111 g"
b10111 $#
17
#285000
07
#290000
b0 S&
b0 {"
b0 z"
0R"
1`"
b11111111111111111111111111111111 b"
1P"
b0 L
b0 W
b0 e"
1L"
1S"
b0 ]"
1M"
b0 ["
b11111111111111111111111111111111 ^"
b1111111111111111111111111111111 d"
b11111111111111111111111111111111 Z"
b11111111 k"
b111111111111 a
b1001 8"
b1001 w
b10 g#
b11 o#
b10 &%
19#
b10 ?#
b0 E
b0 \"
b0 &#
b10101 @
b10101 g"
b10101 $#
b11111111111111111111111111111111 ~"
b11111111111111111111111111111111 I
b11111111111111111111111111111111 X"
b11111111111111111111111111111111 }"
b11111111111111111111111111111111 T&
b11111111111111111111111111111111 h"
b11011 y"
b10 }$
b10 2%
b101 !%
b101 1%
b10 [#
b10 |#
b101 `#
b101 {#
17
#295000
07
#300000
1G
1K
b1010 S&
b11011010 {"
b11011010 z"
0P"
b1011011010 L
b1011011010 W
b1011011010 e"
0O"
0L"
0S"
1V"
1'#
b1011011010 ]"
0M"
1U"
0`"
b0 b"
b1000 ["
b10000000000000000000001011011010 E
b10000000000000000000001011011010 \"
b10000000000000000000001011011010 &#
09#
1/#
b11 ?#
b111 -#
b111 @#
b11 &%
b10 o#
b11 g#
1j#
b10 h#
b10 l#
b101 d#
b101 k#
b1010 w
b1010 8"
b11100 y"
b100 j"
b10110 @
b10110 g"
b10110 $#
17
#305000
07
#310000
0w%
0O&
1R&
0z%
0x%
0=&
1@&
0I&
1L&
0K
0{%
0y%
07&
1:&
0C&
b11011000 v%
0F&
b101 S&
b10101 {"
b10101 z"
0|"
0B
0G
1R"
09&
0E&
0'#
b10101 L
b10101 W
b10101 e"
0V"
05&
0A&
b10101 ]"
0U"
b0 f"
b11010111 p%
b1100 ["
b0 ^"
b0 d"
b0 Z"
b0 k"
b0 a
b0 J
b0 [
b0 W"
b1011 8"
b1011 w
0j#
b100 g#
b100 o#
b101000 #%
b101000 o%
b100 &%
0/#
b100 ?#
b11000000000000000000000000010101 E
b11000000000000000000000000010101 \"
b11000000000000000000000000010101 &#
b10111 @
b10111 g"
b10111 $#
b0 ~"
b0 I
b0 X"
b0 }"
b0 T&
b0 h"
b11101 y"
1Q
17
#315000
07
#320000
0|%
0{%
b0 S&
b0 {"
b0 z"
0R"
1`"
b11111111111111111111111111111111 b"
1P"
01&
14&
07&
1:&
0@&
b11101100 v%
1F&
b0 L
b0 W
b0 e"
1L"
1S"
03&
19&
0?&
1E&
b0 ]"
1M"
0/&
15&
0;&
1A&
b0 ["
b11101011 p%
b101 \#
b101 m#
b11111111111111111111111111111111 ^"
b1111111111111111111111111111111 d"
b11111111111111111111111111111111 Z"
b11111111 k"
b111111111111 a
b0 E
b0 \"
b0 &#
b101 ?#
b101 &%
b10100 #%
b10100 o%
b11 o#
b101 n#
b101 g#
0Q
b11011000 ~$
b11011000 "&
b11110 y"
b11111111111111111111111111111111 ~"
b11111111111111111111111111111111 I
b11111111111111111111111111111111 X"
b11111111111111111111111111111111 }"
b11111111111111111111111111111111 T&
b11111111111111111111111111111111 h"
b10101 @
b10101 g"
b10101 $#
17
#325000
07
#330000
1G
1K
0}%
0|%
0+&
1.&
01&
14&
0:&
b11110110 v%
1@&
b1010 S&
b11011010 {"
b11011010 z"
0P"
0-&
13&
09&
1?&
b1011011010 L
b1011011010 W
b1011011010 e"
0O"
0L"
0S"
1V"
0)&
1/&
05&
1;&
b1011011010 ]"
0M"
1U"
0`"
b0 b"
b11110101 p%
b1000 ["
b110 g#
b10 o#
b111 ^#
b111 p#
b1010 #%
b1010 o%
b110 &%
b110 ?#
b10000000000000000000001011011010 E
b10000000000000000000001011011010 \"
b10000000000000000000001011011010 &#
b10110 @
b10110 g"
b10110 $#
b11111 y"
b11101100 ~$
b11101100 "&
17
#335000
07
#340000
0K
b101 b$
b0 J
b0 [
b0 W"
bz101 c$
1z$
b101 S&
b10101 {"
b10101 z"
0|"
0B
0G
1R"
1y$
b10101 L
b10101 W
b10101 e"
0V"
1u$
b10101 ]"
0U"
b100 \$
b1100 ["
b1011 [$
b0 ^"
b0 d"
b0 Z"
b0 k"
b0 a
b11000000000000000000000000010101 E
b11000000000000000000000000010101 \"
b11000000000000000000000000010101 &#
b111 ?#
1"%
b111 &%
b1 o#
b11 ^#
b11 p#
1c#
b111 g#
b11110110 ~$
b11110110 "&
b100000 y"
b0 ~"
b0 I
b0 X"
b0 }"
b0 T&
b0 h"
b10111 @
b10111 g"
b10111 $#
17
#345000
07
#350000
b0 S&
b0 {"
b0 z"
0R"
1`"
b11111111111111111111111111111111 b"
1P"
1'#
b0 L
b0 W
b0 e"
1L"
1S"
b0 ]"
1M"
b1 \#
b1 m#
b0 ["
b11111111111111111111111111111111 ^"
b1111111111111111111111111111111 d"
b11111111111111111111111111111111 Z"
b11111111 k"
b111111111111 a
1_#
0c#
b1000 g#
b0 o#
b1 n#
b1010 +#
b1010 $%
1.#
0"%
b1000 &%
b1000 ?#
b0 E
b0 \"
b0 &#
b10101 @
b10101 g"
b10101 $#
b11111111111111111111111111111111 ~"
b11111111111111111111111111111111 I
b11111111111111111111111111111111 X"
b11111111111111111111111111111111 }"
b11111111111111111111111111111111 T&
b11111111111111111111111111111111 h"
b100001 y"
17
#355000
07
#360000
b0 ^"
1c"
b10000000000000000000000000000000 d"
b11111111111111111111111111111110 Z"
b1 Q"
b1 f"
b1 J
b1 [
b1 W"
1G
1t$
1K
1f$
b110 b$
1k$
bz110 c$
0n$
b1010 S&
b11011010 {"
b11011010 z"
0P"
1m$
b1011011010 L
b1011011010 W
b1011011010 e"
0O"
0L"
0S"
1V"
0'#
1i$
b1011011010 ]"
0M"
1U"
0`"
b0 b"
b101 \$
b1000 ["
b1010 [$
b10000000000000000000001011011010 E
b10000000000000000000001011011010 \"
b10000000000000000000001011011010 &#
b1001 ?#
0.#
b1001 &%
1b#
b111 o#
b10 ^#
b10 p#
0_#
b1001 g#
1Q
b100010 y"
b10110 @
b10110 g"
b10110 $#
17
#365000
07
#370000
0K
b101 S&
b10101 {"
b10101 z"
0|"
0B
0G
1R"
b10101 L
b10101 W
b10101 e"
0V"
b0 Q"
b10101 ]"
0U"
b0 f"
b1100 ["
b1 ^"
0c"
b1 d"
b1 Z"
b1 k"
b1 a
b0 J
b0 [
b0 W"
1a#
b1010 g#
b1010 &%
b1010 ?#
b11000000000000000000000000010101 E
b11000000000000000000000000010101 \"
b11000000000000000000000000010101 &#
b10111 @
b10111 g"
b10111 $#
b1 ~"
b1 I
b1 X"
b1 }"
b1 T&
b1 h"
b100011 y"
1g$
b110 ]#
b110 h$
0Q
17
#375000
07
#380000
b0 S&
b0 {"
b0 z"
0R"
1P"
b0 L
b0 W
b0 e"
1L"
1S"
b0 ]"
1M"
1'#
b0 ["
b0 ^"
b0 d"
b0 Z"
b0 k"
b0 a
b0 E
b0 \"
b0 &#
b1011 ?#
b1011 &%
10#
0a#
b1011 g#
b10 ,#
b10 i#
b100100 y"
b0 ~"
b0 I
b0 X"
b0 }"
b0 T&
b0 h"
b11000 @
b11000 g"
b11000 $#
17
#385000
07
#390000
b1 J
b1 [
b1 W"
1G
1K
b1010 S&
b11011010 {"
b11011010 z"
0P"
b1011011010 L
b1011011010 W
b1011011010 e"
0O"
0L"
0S"
0'#
b1011011010 ]"
0M"
1"#
1H
1Y"
b1001 ["
00#
b1100 g#
b10010000000000000000001011011010 E
b10010000000000000000001011011010 \"
b10010000000000000000001011011010 &#
b11001 @
b11001 g"
b11001 $#
b0 j"
b100101 y"
1Q
b10 =
b10 p"
b10 4#
17
#395000
07
#400000
0K
b1001 S&
b11001 {"
b11001 z"
0|"
0B
0G
1R"
b11001 L
b11001 W
b11001 e"
b10100100 3
b10100100 S
b10100100 w"
b11001 ]"
0"#
0H
0Y"
b10 r"
b1100 ["
b0 J
b0 [
b0 W"
b10 s"
b1000 x"
b11000000000000000000000000011001 E
b11000000000000000000000000011001 \"
b11000000000000000000000000011001 &#
0Q
b100110 y"
b10 t"
b11010 @
b11010 g"
b11010 $#
17
#405000
07
#410000
b0 S&
b0 {"
b0 z"
0R"
1`"
b11111111111111111111111111111111 b"
1P"
b0 L
b0 W
b0 e"
1L"
1S"
b0 ]"
1M"
b0 ["
b11111111111111111111111111111111 ^"
b1111111111111111111111111111111 d"
b11111111111111111111111111111111 Z"
b11111111 k"
b111111111111 a
b0 E
b0 \"
b0 &#
b11001 @
b11001 g"
b11001 $#
b11111111111111111111111111111111 ~"
b11111111111111111111111111111111 I
b11111111111111111111111111111111 X"
b11111111111111111111111111111111 }"
b11111111111111111111111111111111 T&
b11111111111111111111111111111111 h"
b100111 y"
17
#415000
07
#420000
b0 J
b0 [
b0 W"
0|"
0B
0K
b1001 S&
b11001 {"
b11001 z"
1R"
0P"
b11001 L
b11001 W
b11001 e"
0O"
0L"
0S"
b11001 ]"
0M"
0`"
b0 b"
b1100 ["
b11000000000000000000000000011001 E
b11000000000000000000000000011001 \"
b11000000000000000000000000011001 &#
b101000 y"
b100 j"
b11010 @
b11010 g"
b11010 $#
17
#425000
07
#430000
b0 S&
b0 {"
b0 z"
0R"
1`"
b11111111111111111111111111111110 b"
1P"
b0 L
b0 W
b0 e"
1L"
1S"
b0 ]"
1M"
b0 ["
b11111111111111111111111111111110 ^"
b1111111111111111111111111111110 d"
b11111111111111111111111111111110 Z"
b11111110 k"
b111111111110 a
b0 E
b0 \"
b0 &#
b11011 @
b11011 g"
b11011 $#
b11111111111111111111111111111110 ~"
b11111111111111111111111111111110 I
b11111111111111111111111111111110 X"
b11111111111111111111111111111110 }"
b11111111111111111111111111111110 T&
b11111111111111111111111111111110 h"
b101001 y"
17
#435000
07
#440000
b101010 y"
b11100 @
b11100 g"
b11100 $#
17
#445000
07
#450000
b11101 @
b11101 g"
b11101 $#
b101011 y"
17
#455000
07
#460000
b101100 y"
b11110 @
b11110 g"
b11110 $#
17
#465000
07
#470000
b11111 @
b11111 g"
b11111 $#
b101101 y"
17
#475000
07
#480000
b101110 y"
b100000 @
b100000 g"
b100000 $#
17
#485000
07
#490000
b100001 @
b100001 g"
b100001 $#
b101111 y"
17
#495000
07
#500000
b110000 y"
b100010 @
b100010 g"
b100010 $#
17
#505000
07
#510000
b100011 @
b100011 g"
b100011 $#
b110001 y"
17
#515000
07
#520000
b110010 y"
b100100 @
b100100 g"
b100100 $#
17
#525000
07
#530000
b100101 @
b100101 g"
b100101 $#
b110011 y"
17
#535000
07
#540000
b110100 y"
b100110 @
b100110 g"
b100110 $#
17
#545000
07
#550000
b100111 @
b100111 g"
b100111 $#
b110101 y"
17
#555000
07
#560000
b110110 y"
b101000 @
b101000 g"
b101000 $#
17
#565000
07
#570000
b101001 @
b101001 g"
b101001 $#
b110111 y"
17
#571000
