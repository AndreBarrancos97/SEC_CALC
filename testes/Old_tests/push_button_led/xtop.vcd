$date
	Wed Nov 20 11:34:20 2019
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module xtop_tb $end
$var wire 32 ! r0 [31:0] $end
$var wire 32 " r1 [31:0] $end
$var wire 32 # r10 [31:0] $end
$var wire 32 $ r11 [31:0] $end
$var wire 32 % r12 [31:0] $end
$var wire 32 & r13 [31:0] $end
$var wire 32 ' r14 [31:0] $end
$var wire 32 ( r15 [31:0] $end
$var wire 32 ) r2 [31:0] $end
$var wire 32 * r3 [31:0] $end
$var wire 32 + r4 [31:0] $end
$var wire 32 , r5 [31:0] $end
$var wire 32 - r6 [31:0] $end
$var wire 32 . r7 [31:0] $end
$var wire 32 / r8 [31:0] $end
$var wire 32 0 r9 [31:0] $end
$var wire 1 1 trap $end
$var wire 1 2 led $end
$var reg 1 3 clk $end
$var reg 1 4 push_button $end
$var reg 1 5 rst $end
$var integer 32 6 k [31:0] $end
$var integer 32 7 start_time [31:0] $end
$scope module uut $end
$var wire 1 3 clk $end
$var wire 1 4 push_button $end
$var wire 1 5 rst $end
$var wire 1 1 trap $end
$var wire 1 8 regf_sel $end
$var wire 32 9 regf_data_to_rd [31:0] $end
$var wire 9 : pc [8:0] $end
$var wire 1 ; mem_sel $end
$var wire 32 < mem_data_to_rd [31:0] $end
$var wire 1 = led_sel $end
$var wire 1 2 led $end
$var wire 32 > instruction [31:0] $end
$var wire 1 ? data_we $end
$var wire 32 @ data_to_wr [31:0] $end
$var wire 32 A data_to_rd [31:0] $end
$var wire 1 B data_sel $end
$var wire 10 C data_addr [9:0] $end
$var wire 1 D cprt_sel $end
$var wire 1 E button_sel $end
$scope module addr_decoder $end
$var wire 1 4 button_state $end
$var wire 1 B sel $end
$var wire 32 F regf_data_to_rd [31:0] $end
$var wire 32 G mem_data_to_rd [31:0] $end
$var wire 10 H addr [9:0] $end
$var reg 1 E button_sel $end
$var reg 1 D cprt_sel $end
$var reg 32 I data_to_rd [31:0] $end
$var reg 1 = led_sel $end
$var reg 1 ; mem_sel $end
$var reg 1 8 regf_sel $end
$var reg 1 1 trap_sel $end
$upscope $end
$scope module controller $end
$var wire 1 J alu_arith_ops $end
$var wire 1 K alu_imm_ops $end
$var wire 1 L alu_logic_ops $end
$var wire 1 M alu_mem_ops $end
$var wire 1 N alu_ops $end
$var wire 32 O and_res [31:0] $end
$var wire 1 P branch_ops $end
$var wire 1 3 clk $end
$var wire 1 Q imm_ops $end
$var wire 1 R load_imm_ops $end
$var wire 1 S load_mem_ops $end
$var wire 1 T load_ops $end
$var wire 32 U mem_data_from [31:0] $end
$var wire 32 V mem_data_to [31:0] $end
$var wire 1 B mem_sel $end
$var wire 1 ? mem_we $end
$var wire 1 5 rst $end
$var wire 1 W store_mem_ops $end
$var wire 32 X xor_res [31:0] $end
$var wire 4 Y opcode [3:0] $end
$var wire 32 Z instruction [31:0] $end
$var wire 32 [ imm [31:0] $end
$var reg 32 \ adder_res [31:0] $end
$var reg 1 ] alu_carry $end
$var reg 1 ^ alu_negative $end
$var reg 1 _ alu_overflow $end
$var reg 32 ` alu_result [31:0] $end
$var reg 1 a carry_res_n $end
$var reg 32 b carry_res_n_1 [31:0] $end
$var reg 10 c mem_addr [9:0] $end
$var reg 32 d operand [31:0] $end
$var reg 9 e pc [8:0] $end
$var reg 32 f regA [31:0] $end
$var reg 32 g regB [31:0] $end
$var reg 3 h regC [2:0] $end
$upscope $end
$scope module cprint $end
$var wire 1 3 clk $end
$var wire 8 i data_in [7:0] $end
$var wire 1 j sel $end
$upscope $end
$scope module led1 $end
$var wire 1 k button $end
$var wire 1 3 clk $end
$var wire 1 = led_sel $end
$var wire 1 5 reset $end
$var reg 1 2 led $end
$upscope $end
$scope module ram $end
$var wire 1 3 clk $end
$var wire 9 l data_addr [8:0] $end
$var wire 9 m data_addr_int [8:0] $end
$var wire 1 n data_en_int $end
$var wire 32 o data_in [31:0] $end
$var wire 32 p data_in_int [31:0] $end
$var wire 32 q data_out [31:0] $end
$var wire 1 ; data_sel $end
$var wire 1 ? data_we $end
$var wire 1 r data_we_int $end
$var wire 1 s instr_en $end
$var wire 9 t pc [8:0] $end
$var reg 32 u data_out_int [31:0] $end
$var reg 32 v instruction [31:0] $end
$upscope $end
$scope module regf $end
$var wire 4 w addr [3:0] $end
$var wire 1 3 clk $end
$var wire 32 x data_in [31:0] $end
$var wire 1 8 sel $end
$var wire 1 ? we $end
$var wire 32 y data_out [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx y
bx x
bx w
bx v
bx u
bx t
1s
xr
bx q
bx p
bx o
xn
bx m
bx l
xk
xj
bx i
bx h
bx g
bx f
bx e
bx d
bx c
bx b
xa
bx `
x_
x^
x]
bx \
bx [
bx Z
bx Y
bx X
xW
bx V
bx U
xT
xS
xR
xQ
xP
bx O
xN
xM
xL
xK
xJ
bx I
bx H
bx G
bx F
xE
xD
bx C
xB
bx A
bx @
x?
bx >
x=
bx <
x;
bx :
bx 9
x8
bx 7
bx 6
05
14
13
x2
x1
bx 0
bx /
bx .
bx -
bx ,
bx +
bx *
bx )
bx (
bx '
bx &
bx %
bx $
bx #
bx "
bx !
$end
#5000
03
#10000
13
#11000
0_
0^
0]
b0 `
b0 \
0a
b0 b
b0 X
b0 O
b0 i
0k
b0 d
b0 :
b0 e
b0 t
b0 p
b0 @
b0 V
b0 o
b0 x
b0 f
b0 g
b0 h
02
15
#15000
03
#20000
b11 \
b11 b
b11 X
b11 d
1B
b0 9
b0 F
b0 y
b11 A
b11 I
b11 U
b1110 w
b11101110 m
b11101110 l
01
0D
08
0n
0;
0=
1E
b1011101110 C
b1011101110 H
b1011101110 c
0M
0N
0j
1T
0Q
b1011101110 [
0P
0L
0J
0K
0r
0?
0W
1S
0R
b1000 Y
b10000000000000000000001011101110 >
b10000000000000000000001011101110 Z
b10000000000000000000001011101110 v
13
#21000
b10000 6
b10101 7
05
#25000
03
#30000
b110 \
b110 b
b0 X
b11 O
b11 i
1k
b1 :
b1 e
b1 t
b11 p
b11 @
b11 V
b11 o
b11 x
b11 f
13
#35000
03
#40000
b0 A
b0 I
b0 U
b11 \
b11 b
b11 X
b0 O
b1100 w
b10111100 m
b10111100 l
1=
0E
b0 d
b1010111100 C
b1010111100 H
b1010111100 c
0T
b1010111100 [
1r
1?
1W
0S
b1001 Y
b10 :
b10 e
b10 t
b10010000000000000000001010111100 >
b10010000000000000000001010111100 Z
b10010000000000000000001010111100 v
13
#45000
03
#50000
0B
b0 A
b0 I
b0 U
b0 w
b0 m
b0 l
0n
0;
0=
b0 C
b0 H
b0 c
1T
1Q
b0 [
0r
0?
0W
1R
b110 Y
b11 :
b11 e
b11 t
12
b1100000000000000000000000000000 >
b1100000000000000000000000000000 Z
b1100000000000000000000000000000 v
13
#55000
03
#60000
b101 w
b110101 m
b110101 l
b110101 d
b110101 C
b110101 H
b110101 c
b110101 [
b110101 \
b110101 b
b110101 X
b0 i
0k
b0 p
b0 @
b0 V
b0 o
b0 x
b0 f
b100 :
b100 e
b100 t
b1100000000000000000000000110101 >
b1100000000000000000000000110101 Z
b1100000000000000000000000110101 v
13
#65000
03
#70000
11
1B
b1111 w
b111111111 m
b111111111 l
b0 d
b1111111111 C
b1111111111 H
b1111111111 c
0T
0Q
b111111111111111 [
1r
1?
1W
0R
b110101 \
b110101 b
b110101 X
b0 O
b110101 i
1k
b1001 Y
b101 :
b101 e
b101 t
b110101 p
b110101 @
b110101 V
b110101 o
b110101 x
b110101 f
b10010000000000000111111111111111 >
b10010000000000000111111111111111 Z
b10010000000000000111111111111111 v
13
#75000
03
#80000
0B
b0 A
b0 I
b0 U
b0 w
b0 m
b0 l
0n
0;
01
b0 C
b0 H
b0 c
1T
1Q
b0 [
0r
0?
0W
1R
b110 Y
b110 :
b110 e
b110 t
b1100000000000000000000000000000 >
b1100000000000000000000000000000 Z
b1100000000000000000000000000000 v
13
