$date
	Mon Dec 16 17:43:56 2019
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module xtop_tb $end
$var wire 32 ! r0 [31:0] $end
$var wire 32 " r1 [31:0] $end
$var wire 32 # r10 [31:0] $end
$var wire 32 $ r11 [31:0] $end
$var wire 32 % r12 [31:0] $end
$var wire 32 & r13 [31:0] $end
$var wire 32 ' r14 [31:0] $end
$var wire 32 ( r15 [31:0] $end
$var wire 32 ) r2 [31:0] $end
$var wire 32 * r3 [31:0] $end
$var wire 32 + r4 [31:0] $end
$var wire 32 , r5 [31:0] $end
$var wire 32 - r6 [31:0] $end
$var wire 32 . r7 [31:0] $end
$var wire 32 / r8 [31:0] $end
$var wire 32 0 r9 [31:0] $end
$var wire 1 1 trap $end
$var wire 4 2 Disp_sel [3:0] $end
$var wire 8 3 Disp [7:0] $end
$var reg 1 4 Btn3 $end
$var reg 8 5 Sw [7:0] $end
$var reg 1 6 clk $end
$var reg 1 7 rst $end
$var integer 32 8 k [31:0] $end
$var integer 32 9 start_time [31:0] $end
$scope module uut $end
$var wire 1 : Btn2 $end
$var wire 1 4 Btn3 $end
$var wire 8 ; Sw [7:0] $end
$var wire 1 6 clk $end
$var wire 1 7 rst $end
$var wire 1 1 trap $end
$var wire 1 < regf_sel $end
$var wire 32 = regf_data_to_rd [31:0] $end
$var wire 9 > pc [8:0] $end
$var wire 1 ? mem_sel $end
$var wire 32 @ mem_data_to_rd [31:0] $end
$var wire 1 A led0_sel $end
$var wire 32 B instruction [31:0] $end
$var wire 1 C data_we $end
$var wire 32 D data_to_wr [31:0] $end
$var wire 32 E data_to_rd [31:0] $end
$var wire 1 F data_sel $end
$var wire 10 G data_addr [9:0] $end
$var wire 1 H cprt_sel $end
$var wire 4 I Disp_sel [3:0] $end
$var wire 8 J Disp [7:0] $end
$scope module addr_decoder $end
$var wire 1 : btn2_data_to_read $end
$var wire 1 4 btn3_data_to_read $end
$var wire 8 K sw_data_to_read [7:0] $end
$var wire 1 F sel $end
$var wire 32 L regf_data_to_rd [31:0] $end
$var wire 32 M mem_data_to_rd [31:0] $end
$var wire 10 N addr [9:0] $end
$var reg 1 O btn2_sel $end
$var reg 1 P btn3_sel $end
$var reg 1 H cprt_sel $end
$var reg 32 Q data_to_rd [31:0] $end
$var reg 1 A led0_sel $end
$var reg 1 ? mem_sel $end
$var reg 1 < regf_sel $end
$var reg 1 R sw2_sel $end
$var reg 1 S sw_sel $end
$var reg 1 1 trap_sel $end
$upscope $end
$scope module controller $end
$var wire 1 T alu_arith_ops $end
$var wire 1 U alu_imm_ops $end
$var wire 1 V alu_logic_ops $end
$var wire 1 W alu_mem_ops $end
$var wire 1 X alu_ops $end
$var wire 32 Y and_res [31:0] $end
$var wire 1 Z branch_ops $end
$var wire 1 6 clk $end
$var wire 1 [ imm_ops $end
$var wire 1 \ load_imm_ops $end
$var wire 1 ] load_mem_ops $end
$var wire 1 ^ load_ops $end
$var wire 32 _ mem_data_from [31:0] $end
$var wire 32 ` mem_data_to [31:0] $end
$var wire 1 F mem_sel $end
$var wire 1 C mem_we $end
$var wire 1 7 rst $end
$var wire 1 a store_mem_ops $end
$var wire 32 b xor_res [31:0] $end
$var wire 4 c opcode [3:0] $end
$var wire 32 d instruction [31:0] $end
$var wire 32 e imm [31:0] $end
$var reg 32 f adder_res [31:0] $end
$var reg 1 g alu_carry $end
$var reg 1 h alu_negative $end
$var reg 1 i alu_overflow $end
$var reg 32 j alu_result [31:0] $end
$var reg 1 k carry_res_n $end
$var reg 32 l carry_res_n_1 [31:0] $end
$var reg 10 m mem_addr [9:0] $end
$var reg 32 n operand [31:0] $end
$var reg 9 o pc [8:0] $end
$var reg 32 p regA [31:0] $end
$var reg 32 q regB [31:0] $end
$var reg 3 r regC [2:0] $end
$upscope $end
$scope module cprint $end
$var wire 1 6 clk $end
$var wire 8 s data_in [7:0] $end
$var wire 1 t sel $end
$upscope $end
$scope module displayDecoder $end
$var wire 8 u bin [7:0] $end
$var wire 1 6 clk $end
$var wire 2 v dot [1:0] $end
$var wire 1 A led0_sel $end
$var wire 2 w msg [1:0] $end
$var wire 1 7 rst $end
$var wire 1 x sgn $end
$var wire 1 C wr_enable $end
$var wire 2 y LED_activating_counter [1:0] $end
$var reg 5 z aux [4:0] $end
$var reg 12 { bcd [11:0] $end
$var reg 8 | bin_reg [7:0] $end
$var reg 2 } disp_dot [1:0] $end
$var reg 4 ~ disp_select [3:0] $end
$var reg 8 !" disp_value [7:0] $end
$var reg 4 "" j [3:0] $end
$var reg 20 #" refresh_counter [19:0] $end
$upscope $end
$scope module ram $end
$var wire 1 6 clk $end
$var wire 9 $" data_addr [8:0] $end
$var wire 9 %" data_addr_int [8:0] $end
$var wire 1 &" data_en_int $end
$var wire 32 '" data_in [31:0] $end
$var wire 32 (" data_in_int [31:0] $end
$var wire 32 )" data_out [31:0] $end
$var wire 1 ? data_sel $end
$var wire 1 C data_we $end
$var wire 1 *" data_we_int $end
$var wire 1 +" instr_en $end
$var wire 9 ," pc [8:0] $end
$var reg 32 -" data_out_int [31:0] $end
$var reg 32 ." instruction [31:0] $end
$upscope $end
$scope module regf $end
$var wire 4 /" addr [3:0] $end
$var wire 1 6 clk $end
$var wire 32 0" data_in [31:0] $end
$var wire 1 < sel $end
$var wire 1 C we $end
$var wire 32 1" data_out [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx 1"
bx 0"
bx /"
bx ."
bx -"
bx ,"
1+"
x*"
bx )"
bx ("
bx '"
x&"
bx %"
bx $"
bx #"
bx ""
bx !"
bx ~
b0 }
bx |
bx {
bx z
bx y
0x
b0 w
b0 v
bx u
xt
bx s
bx r
bx q
bx p
bx o
b0 n
bx m
bx l
xk
b0 j
0i
0h
0g
bx f
bx e
bx d
bx c
bx b
xa
bx `
b0 _
x^
x]
x\
x[
xZ
b0 Y
xX
xW
xV
xU
xT
xS
xR
b0 Q
xP
xO
bx N
bx M
bx L
b1010 K
bx J
bx I
xH
bx G
xF
b0 E
bx D
xC
bx B
xA
bx @
x?
bx >
bx =
x<
b1010 ;
z:
bx 9
bx 8
07
16
b1010 5
14
bx 3
bx 2
x1
bx 0
bx /
bx .
bx -
bx ,
bx +
bx *
bx )
bx (
bx '
bx &
bx %
bx $
bx #
bx "
bx !
$end
#5000
06
#10000
16
#11000
b11000000 3
b11000000 J
b11000000 !"
b0 z
b1110 2
b1110 I
b1110 ~
b0 f
0k
b0 l
b0 b
b0 s
b0 u
b1000 ""
b0 {
b0 y
b0 >
b0 o
b0 ,"
b0 ("
b0 D
b0 `
b0 '"
b0 0"
b0 p
b0 q
b0 r
b0 |
b0 #"
17
#15000
06
#20000
b1 f
b1 l
b1 b
b1 n
b1 E
b1 Q
b1 _
1F
b0 =
b0 L
b0 1"
b110 /"
b11000110 %"
b11000110 $"
01
0H
0<
0&"
0?
0A
0R
0S
0O
1P
b1011000110 G
b1011000110 N
b1011000110 m
0W
0X
0t
1^
0[
b1011000110 e
0Z
0V
0T
0U
0*"
0C
0a
1]
0\
b1000 c
b10000000000000000000001011000110 B
b10000000000000000000001011000110 d
b10000000000000000000001011000110 ."
16
#21000
b10101 9
07
#25000
06
#30000
b10 f
b10 l
b0 b
b1 Y
b1 s
b1 u
b1 >
b1 o
b1 ,"
b1 ("
b1 D
b1 `
b1 '"
b1 0"
b1 p
b1 #"
16
#35000
06
#40000
0F
b0 E
b0 Q
b0 _
b1 f
b1 l
b1 b
b0 Y
b0 /"
b0 %"
b0 $"
0&"
0?
0P
1Z
b0 n
b0 G
b0 N
b0 m
0^
b0 e
0]
b1100 c
b10 #"
b10 >
b10 o
b10 ,"
b11000000000000000000000000000000 B
b11000000000000000000000000000000 d
b11000000000000000000000000000000 ."
16
#45000
06
#50000
0Z
1X
1T
1[
1U
b0 f
b0 l
b0 b
b0 s
b0 u
b0 c
b11 >
b11 o
b11 ,"
b0 ("
b0 D
b0 `
b0 '"
b0 0"
b0 p
b11 #"
b0 B
b0 d
b0 ."
16
#55000
06
#60000
b1010 f
b1010 l
b1010 b
b1010 n
b1010 E
b1010 Q
b1010 _
1S
1F
b11000000 %"
b11000000 $"
0X
b1011000000 G
b1011000000 N
b1011000000 m
0W
0T
0[
1^
b1011000000 e
0U
1]
b1000 c
b100 #"
b100 >
b100 o
b100 ,"
b10000000000000000000001011000000 B
b10000000000000000000001011000000 d
b10000000000000000000001011000000 ."
16
#65000
06
#70000
bx =
bx L
bx 1"
bx E
bx Q
bx _
b0 %"
b0 $"
1<
0S
b0 n
b1000000000 G
b1000000000 N
b1000000000 m
0^
b1000000000 e
1*"
1C
1a
0]
b1010 f
b1010 l
b1010 b
b0 Y
b1010 s
b1010 u
b1001 c
b101 >
b101 o
b101 ,"
b1010 ("
b1010 D
b1010 `
b1010 '"
b1010 0"
b1010 p
b101 #"
b10010000000000000000001000000000 B
b10010000000000000000001000000000 d
b10010000000000000000001000000000 ."
16
#75000
06
#80000
bx f
bx l
b101x b
b0 Y
b1010 /"
b11001010 %"
b11001010 $"
1O
0<
b0z n
b1011001010 G
b1011001010 N
b1011001010 m
1^
b1011001010 e
0*"
0C
0a
1]
b0z E
b0z Q
b0z _
b1000 c
b0 =
b0 L
b0 1"
b110 #"
b110 >
b110 o
b110 ,"
b10000000000000000000001011001010 B
b10000000000000000000001011001010 d
b10000000000000000000001011001010 ."
b1010 !
16
#85000
06
#90000
0F
b0 E
b0 Q
b0 _
b101 /"
b101 %"
b101 $"
0&"
0?
0O
1Z
b0 n
b101 G
b101 N
b101 m
0^
b101 e
0]
b0x b
b0 Y
b0z s
b0z u
b1100 c
b111 >
b111 o
b111 ,"
b0z ("
b0z D
b0z `
b0z '"
b0z 0"
b0z p
b111 #"
b11000000000000000000000000000101 B
b11000000000000000000000000000101 d
b11000000000000000000000000000101 ."
16
#95000
06
#100000
b0 /"
b0 %"
b0 $"
0Z
xh
xi
xg
bx j
1X
b0 G
b0 N
b0 m
1T
1[
b0 e
1U
xk
bx b
bx s
bx u
b0 c
b1000 #"
bx ("
bx D
bx `
bx '"
bx 0"
bx p
b1000 >
b1000 o
b1000 ,"
b0 B
b0 d
b0 ."
16
#105000
06
#110000
b0x0x0 Y
b1010 n
b1010 E
b1010 Q
b1010 _
1R
1F
b1110 /"
b11001110 %"
b11001110 $"
0X
b1011001110 G
b1011001110 N
b1011001110 m
0W
0T
0[
1^
b1011001110 e
0U
1]
0i
0h
0g
b0 j
b1000 c
b1001 >
b1001 o
b1001 ,"
bx r
b1001 #"
b10000000000000000000001011001110 B
b10000000000000000000001011001110 d
b10000000000000000000001011001110 ."
16
#115000
06
#120000
bx =
bx L
bx 1"
bx E
bx Q
bx _
b1 /"
b1 %"
b1 $"
1<
0R
b0 n
b1000000001 G
b1000000001 N
b1000000001 m
0^
b1000000001 e
1*"
1C
1a
0]
b1010 f
0k
b1010 l
b1010 b
b0 Y
b1010 s
b1010 u
b1001 c
b1010 #"
b1010 ("
b1010 D
b1010 `
b1010 '"
b1010 0"
b1010 p
b1010 >
b1010 o
b1010 ,"
b10010000000000000000001000000001 B
b10010000000000000000001000000001 d
b10010000000000000000001000000001 ."
16
#121000
bx E
bx Q
bx _
b1011 5
b1011 ;
b1011 K
#125000
06
#130000
b10100 f
b10100 l
b0 b
b1010 Y
b0 /"
b0 %"
b0 $"
1<
b1010 n
b1000000000 G
b1000000000 N
b1000000000 m
1^
b1010 E
b1010 Q
b1010 _
b1000000000 e
0*"
0C
0a
1]
b1010 =
b1010 L
b1010 1"
b1000 c
b1011 >
b1011 o
b1011 ,"
b1011 #"
b1010 "
b10000000000000000000001000000000 B
b10000000000000000000001000000000 d
b10000000000000000000001000000000 ."
16
#135000
06
#140000
1k
0F
b0 E
b0 Q
b0 _
b0 =
b0 L
b0 1"
b1001 f
b10000000000000000000000000001001 l
b11111111111111111111111111110101 b
b1010 Y
b1111 /"
b111111111 %"
b111111111 $"
01
0<
1X
b11111111111111111111111111111111 n
b1111111111 G
b1111111111 N
b1111111111 m
1[
0^
b11111111111111111111111111111111 e
1U
0]
b10100 j
b11 c
b1100 #"
b1100 >
b1100 o
b1100 ,"
b111111111111111111111111111111 B
b111111111111111111111111111111 d
b111111111111111111111111111111 ."
16
#145000
06
#150000
b101000 j
b10011 f
b10000000000000000000000000010011 l
b11111111111111111111111111101011 b
b10100 Y
b10100 s
b10100 u
b11111111111111111111111111111111 n
b1101 >
b1101 o
b1101 ,"
b10100 ("
b10100 D
b10100 `
b10100 '"
b10100 0"
b10100 p
b0 r
b1101 #"
16
#155000
06
#160000
b1010000 j
b100111 f
b10000000000000000000000000100111 l
b11111111111111111111111111010111 b
b101000 Y
b101000 s
b101000 u
b1110 #"
b101000 ("
b101000 D
b101000 `
b101000 '"
b101000 0"
b101000 p
b1110 >
b1110 o
b1110 ,"
16
#165000
06
#170000
b10100000 j
b1001111 f
b10000000000000000000000001001111 l
b11111111111111111111111110101111 b
b1010000 Y
b1010000 s
b1010000 u
b1111 >
b1111 o
b1111 ,"
b1010000 ("
b1010000 D
b1010000 `
b1010000 '"
b1010000 0"
b1010000 p
b1111 #"
16
#175000
06
#180000
b1010 E
b1010 Q
b1010 _
b1010 =
b1010 L
b1010 1"
1<
1F
0k
b1 /"
b1 %"
b1 $"
b1010 n
b1000000001 G
b1000000001 N
b1000000001 m
1W
0[
b1000000001 e
1V
0U
0h
b10101010 j
b10101010 f
b10101010 l
b10101010 b
b0 Y
b10100000 s
b10100000 u
b101 c
b10000 #"
b10100000 ("
b10100000 D
b10100000 `
b10100000 '"
b10100000 0"
b10100000 p
b10000 >
b10000 o
b10000 ,"
b1010000000000000000001000000001 B
b1010000000000000000001000000001 d
b1010000000000000000001000000001 ."
16
#185000
06
#190000
b0 E
b0 Q
b0 _
b0 =
b0 L
b0 1"
b1100 /"
b10111100 %"
b10111100 $"
1A
0<
0X
b0 n
b1010111100 G
b1010111100 N
b1010111100 m
0W
b1010111100 e
0V
1*"
1C
1a
b0 j
b10101010 f
b10101010 l
b10101010 b
b0 Y
b10101010 s
b10101010 u
b1001 c
b10001 >
b10001 o
b10001 ,"
b10101010 ("
b10101010 D
b10101010 `
b10101010 '"
b10101010 0"
b10101010 p
b10001 #"
b10010000000000000000001010111100 B
b10010000000000000000001010111100 d
b10010000000000000000001010111100 ."
16
#195000
06
#200000
0F
b0 E
b0 Q
b0 _
b11011111 f
b11011111 l
b10011111 b
b100000 Y
b101 /"
b110101 %"
b110101 $"
0&"
0?
0A
b110101 n
b110101 G
b110101 N
b110101 m
1^
1[
b110101 e
0*"
0C
0a
1\
b101110000 {
b1000 ""
b110 c
b10010 #"
b10101010 |
b10010 >
b10010 o
b10010 ,"
b1100000000000000000000000110101 B
b1100000000000000000000000110101 d
b1100000000000000000000000110101 ."
16
#205000
06
#210000
11
1F
b1111 /"
b111111111 %"
b111111111 $"
b0 n
b1111111111 G
b1111111111 N
b1111111111 m
0^
0[
b111111111111111 e
1*"
1C
1a
0\
b110101 f
b110101 l
b110101 b
b0 Y
b110101 s
b110101 u
b1001 c
b10011 >
b10011 o
b10011 ,"
b110101 ("
b110101 D
b110101 `
b110101 '"
b110101 0"
b110101 p
b10011 #"
b10010000000000000111111111111111 B
b10010000000000000111111111111111 d
b10010000000000000111111111111111 ."
16
#215000
06
#220000
0F
b0 E
b0 Q
b0 _
b0 /"
b0 %"
b0 $"
0&"
0?
01
b0 G
b0 N
b0 m
1^
1[
b0 e
0*"
0C
0a
1\
b110 c
b10100 #"
b10100 >
b10100 o
b10100 ,"
b1100000000000000000000000000000 B
b1100000000000000000000000000000 d
b1100000000000000000000000000000 ."
16
